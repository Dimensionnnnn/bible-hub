/* tslint:disable */
/* eslint-disable */
/**
 * SocialMedia
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { AuthSignInDto } from '../models';
// @ts-ignore
import { AuthSignUpDto } from '../models';
// @ts-ignore
import { Users } from '../models';
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Sign in user
         * @param {AuthSignInDto} authSignInDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignIn: async (authSignInDto: AuthSignInDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authSignInDto' is not null or undefined
            assertParamExists('authControllerSignIn', 'authSignInDto', authSignInDto)
            const localVarPath = `/auth/sign-in`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authSignInDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sign up user
         * @param {AuthSignUpDto} authSignUpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignUp: async (authSignUpDto: AuthSignUpDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authSignUpDto' is not null or undefined
            assertParamExists('authControllerSignUp', 'authSignUpDto', authSignUpDto)
            const localVarPath = `/auth/sign-up`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authSignUpDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Sign in user
         * @param {AuthSignInDto} authSignInDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerSignIn(authSignInDto: AuthSignInDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Users>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerSignIn(authSignInDto, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthenticationApi.authControllerSignIn']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Sign up user
         * @param {AuthSignUpDto} authSignUpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerSignUp(authSignUpDto: AuthSignUpDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Users>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerSignUp(authSignUpDto, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthenticationApi.authControllerSignUp']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * 
         * @summary Sign in user
         * @param {AuthenticationApiAuthControllerSignInRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignIn(requestParameters: AuthenticationApiAuthControllerSignInRequest, options?: AxiosRequestConfig): AxiosPromise<Users> {
            return localVarFp.authControllerSignIn(requestParameters.authSignInDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sign up user
         * @param {AuthenticationApiAuthControllerSignUpRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignUp(requestParameters: AuthenticationApiAuthControllerSignUpRequest, options?: AxiosRequestConfig): AxiosPromise<Users> {
            return localVarFp.authControllerSignUp(requestParameters.authSignUpDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for authControllerSignIn operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiAuthControllerSignInRequest
 */
export interface AuthenticationApiAuthControllerSignInRequest {
    /**
     * 
     * @type {AuthSignInDto}
     * @memberof AuthenticationApiAuthControllerSignIn
     */
    readonly authSignInDto: AuthSignInDto
}

/**
 * Request parameters for authControllerSignUp operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiAuthControllerSignUpRequest
 */
export interface AuthenticationApiAuthControllerSignUpRequest {
    /**
     * 
     * @type {AuthSignUpDto}
     * @memberof AuthenticationApiAuthControllerSignUp
     */
    readonly authSignUpDto: AuthSignUpDto
}

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * 
     * @summary Sign in user
     * @param {AuthenticationApiAuthControllerSignInRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authControllerSignIn(requestParameters: AuthenticationApiAuthControllerSignInRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authControllerSignIn(requestParameters.authSignInDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sign up user
     * @param {AuthenticationApiAuthControllerSignUpRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authControllerSignUp(requestParameters: AuthenticationApiAuthControllerSignUpRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authControllerSignUp(requestParameters.authSignUpDto, options).then((request) => request(this.axios, this.basePath));
    }
}

