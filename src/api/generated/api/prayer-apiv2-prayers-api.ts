/* tslint:disable */
/* eslint-disable */
/**
 * SocialMedia
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { Prayers } from '../models';
/**
 * PrayerAPIV2PrayersApi - axios parameter creator
 * @export
 */
export const PrayerAPIV2PrayersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Mark prayer as complete
         * @param {number} prayerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prayerControllerComplete: async (prayerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prayerId' is not null or undefined
            assertParamExists('prayerControllerComplete', 'prayerId', prayerId)
            const localVarPath = `/prayers/{prayerId}/complete`
                .replace(`{${"prayerId"}}`, encodeURIComponent(String(prayerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete prayer by id
         * @param {number} prayerId Set prayer Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prayerControllerDelete: async (prayerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prayerId' is not null or undefined
            assertParamExists('prayerControllerDelete', 'prayerId', prayerId)
            const localVarPath = `/prayers/{prayerId}`
                .replace(`{${"prayerId"}}`, encodeURIComponent(String(prayerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Do prayer
         * @param {number} prayerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prayerControllerDo: async (prayerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prayerId' is not null or undefined
            assertParamExists('prayerControllerDo', 'prayerId', prayerId)
            const localVarPath = `/prayers/{prayerId}/do`
                .replace(`{${"prayerId"}}`, encodeURIComponent(String(prayerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get prayer by id
         * @param {number} prayerId Set prayer Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prayerControllerFindById: async (prayerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prayerId' is not null or undefined
            assertParamExists('prayerControllerFindById', 'prayerId', prayerId)
            const localVarPath = `/prayers/{prayerId}`
                .replace(`{${"prayerId"}}`, encodeURIComponent(String(prayerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get subscribed prayers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prayerControllerFindSubscribed: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/subscribed-prayers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Subscribe to prayer
         * @param {number} prayerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prayerControllerSubscribe: async (prayerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prayerId' is not null or undefined
            assertParamExists('prayerControllerSubscribe', 'prayerId', prayerId)
            const localVarPath = `/prayers/{prayerId}/subscribe`
                .replace(`{${"prayerId"}}`, encodeURIComponent(String(prayerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove mark prayer as complete
         * @param {number} prayerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prayerControllerUncomplete: async (prayerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prayerId' is not null or undefined
            assertParamExists('prayerControllerUncomplete', 'prayerId', prayerId)
            const localVarPath = `/prayers/{prayerId}/complete`
                .replace(`{${"prayerId"}}`, encodeURIComponent(String(prayerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unsubscribe from prayer
         * @param {number} prayerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prayerControllerUnsubscribe: async (prayerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prayerId' is not null or undefined
            assertParamExists('prayerControllerUnsubscribe', 'prayerId', prayerId)
            const localVarPath = `/prayers/{prayerId}/subscribe`
                .replace(`{${"prayerId"}}`, encodeURIComponent(String(prayerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PrayerAPIV2PrayersApi - functional programming interface
 * @export
 */
export const PrayerAPIV2PrayersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PrayerAPIV2PrayersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Mark prayer as complete
         * @param {number} prayerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async prayerControllerComplete(prayerId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Prayers>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.prayerControllerComplete(prayerId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PrayerAPIV2PrayersApi.prayerControllerComplete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete prayer by id
         * @param {number} prayerId Set prayer Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async prayerControllerDelete(prayerId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.prayerControllerDelete(prayerId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PrayerAPIV2PrayersApi.prayerControllerDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Do prayer
         * @param {number} prayerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async prayerControllerDo(prayerId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Prayers>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.prayerControllerDo(prayerId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PrayerAPIV2PrayersApi.prayerControllerDo']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get prayer by id
         * @param {number} prayerId Set prayer Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async prayerControllerFindById(prayerId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Prayers>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.prayerControllerFindById(prayerId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PrayerAPIV2PrayersApi.prayerControllerFindById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get subscribed prayers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async prayerControllerFindSubscribed(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.prayerControllerFindSubscribed(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PrayerAPIV2PrayersApi.prayerControllerFindSubscribed']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Subscribe to prayer
         * @param {number} prayerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async prayerControllerSubscribe(prayerId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Prayers>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.prayerControllerSubscribe(prayerId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PrayerAPIV2PrayersApi.prayerControllerSubscribe']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Remove mark prayer as complete
         * @param {number} prayerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async prayerControllerUncomplete(prayerId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Prayers>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.prayerControllerUncomplete(prayerId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PrayerAPIV2PrayersApi.prayerControllerUncomplete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Unsubscribe from prayer
         * @param {number} prayerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async prayerControllerUnsubscribe(prayerId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Prayers>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.prayerControllerUnsubscribe(prayerId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PrayerAPIV2PrayersApi.prayerControllerUnsubscribe']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * PrayerAPIV2PrayersApi - factory interface
 * @export
 */
export const PrayerAPIV2PrayersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PrayerAPIV2PrayersApiFp(configuration)
    return {
        /**
         * 
         * @summary Mark prayer as complete
         * @param {PrayerAPIV2PrayersApiPrayerControllerCompleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prayerControllerComplete(requestParameters: PrayerAPIV2PrayersApiPrayerControllerCompleteRequest, options?: AxiosRequestConfig): AxiosPromise<Prayers> {
            return localVarFp.prayerControllerComplete(requestParameters.prayerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete prayer by id
         * @param {PrayerAPIV2PrayersApiPrayerControllerDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prayerControllerDelete(requestParameters: PrayerAPIV2PrayersApiPrayerControllerDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.prayerControllerDelete(requestParameters.prayerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Do prayer
         * @param {PrayerAPIV2PrayersApiPrayerControllerDoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prayerControllerDo(requestParameters: PrayerAPIV2PrayersApiPrayerControllerDoRequest, options?: AxiosRequestConfig): AxiosPromise<Prayers> {
            return localVarFp.prayerControllerDo(requestParameters.prayerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get prayer by id
         * @param {PrayerAPIV2PrayersApiPrayerControllerFindByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prayerControllerFindById(requestParameters: PrayerAPIV2PrayersApiPrayerControllerFindByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Prayers> {
            return localVarFp.prayerControllerFindById(requestParameters.prayerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get subscribed prayers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prayerControllerFindSubscribed(options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.prayerControllerFindSubscribed(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Subscribe to prayer
         * @param {PrayerAPIV2PrayersApiPrayerControllerSubscribeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prayerControllerSubscribe(requestParameters: PrayerAPIV2PrayersApiPrayerControllerSubscribeRequest, options?: AxiosRequestConfig): AxiosPromise<Prayers> {
            return localVarFp.prayerControllerSubscribe(requestParameters.prayerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove mark prayer as complete
         * @param {PrayerAPIV2PrayersApiPrayerControllerUncompleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prayerControllerUncomplete(requestParameters: PrayerAPIV2PrayersApiPrayerControllerUncompleteRequest, options?: AxiosRequestConfig): AxiosPromise<Prayers> {
            return localVarFp.prayerControllerUncomplete(requestParameters.prayerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Unsubscribe from prayer
         * @param {PrayerAPIV2PrayersApiPrayerControllerUnsubscribeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prayerControllerUnsubscribe(requestParameters: PrayerAPIV2PrayersApiPrayerControllerUnsubscribeRequest, options?: AxiosRequestConfig): AxiosPromise<Prayers> {
            return localVarFp.prayerControllerUnsubscribe(requestParameters.prayerId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for prayerControllerComplete operation in PrayerAPIV2PrayersApi.
 * @export
 * @interface PrayerAPIV2PrayersApiPrayerControllerCompleteRequest
 */
export interface PrayerAPIV2PrayersApiPrayerControllerCompleteRequest {
    /**
     * 
     * @type {number}
     * @memberof PrayerAPIV2PrayersApiPrayerControllerComplete
     */
    readonly prayerId: number
}

/**
 * Request parameters for prayerControllerDelete operation in PrayerAPIV2PrayersApi.
 * @export
 * @interface PrayerAPIV2PrayersApiPrayerControllerDeleteRequest
 */
export interface PrayerAPIV2PrayersApiPrayerControllerDeleteRequest {
    /**
     * Set prayer Id
     * @type {number}
     * @memberof PrayerAPIV2PrayersApiPrayerControllerDelete
     */
    readonly prayerId: number
}

/**
 * Request parameters for prayerControllerDo operation in PrayerAPIV2PrayersApi.
 * @export
 * @interface PrayerAPIV2PrayersApiPrayerControllerDoRequest
 */
export interface PrayerAPIV2PrayersApiPrayerControllerDoRequest {
    /**
     * 
     * @type {number}
     * @memberof PrayerAPIV2PrayersApiPrayerControllerDo
     */
    readonly prayerId: number
}

/**
 * Request parameters for prayerControllerFindById operation in PrayerAPIV2PrayersApi.
 * @export
 * @interface PrayerAPIV2PrayersApiPrayerControllerFindByIdRequest
 */
export interface PrayerAPIV2PrayersApiPrayerControllerFindByIdRequest {
    /**
     * Set prayer Id
     * @type {number}
     * @memberof PrayerAPIV2PrayersApiPrayerControllerFindById
     */
    readonly prayerId: number
}

/**
 * Request parameters for prayerControllerSubscribe operation in PrayerAPIV2PrayersApi.
 * @export
 * @interface PrayerAPIV2PrayersApiPrayerControllerSubscribeRequest
 */
export interface PrayerAPIV2PrayersApiPrayerControllerSubscribeRequest {
    /**
     * 
     * @type {number}
     * @memberof PrayerAPIV2PrayersApiPrayerControllerSubscribe
     */
    readonly prayerId: number
}

/**
 * Request parameters for prayerControllerUncomplete operation in PrayerAPIV2PrayersApi.
 * @export
 * @interface PrayerAPIV2PrayersApiPrayerControllerUncompleteRequest
 */
export interface PrayerAPIV2PrayersApiPrayerControllerUncompleteRequest {
    /**
     * 
     * @type {number}
     * @memberof PrayerAPIV2PrayersApiPrayerControllerUncomplete
     */
    readonly prayerId: number
}

/**
 * Request parameters for prayerControllerUnsubscribe operation in PrayerAPIV2PrayersApi.
 * @export
 * @interface PrayerAPIV2PrayersApiPrayerControllerUnsubscribeRequest
 */
export interface PrayerAPIV2PrayersApiPrayerControllerUnsubscribeRequest {
    /**
     * 
     * @type {number}
     * @memberof PrayerAPIV2PrayersApiPrayerControllerUnsubscribe
     */
    readonly prayerId: number
}

/**
 * PrayerAPIV2PrayersApi - object-oriented interface
 * @export
 * @class PrayerAPIV2PrayersApi
 * @extends {BaseAPI}
 */
export class PrayerAPIV2PrayersApi extends BaseAPI {
    /**
     * 
     * @summary Mark prayer as complete
     * @param {PrayerAPIV2PrayersApiPrayerControllerCompleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrayerAPIV2PrayersApi
     */
    public prayerControllerComplete(requestParameters: PrayerAPIV2PrayersApiPrayerControllerCompleteRequest, options?: AxiosRequestConfig) {
        return PrayerAPIV2PrayersApiFp(this.configuration).prayerControllerComplete(requestParameters.prayerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete prayer by id
     * @param {PrayerAPIV2PrayersApiPrayerControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrayerAPIV2PrayersApi
     */
    public prayerControllerDelete(requestParameters: PrayerAPIV2PrayersApiPrayerControllerDeleteRequest, options?: AxiosRequestConfig) {
        return PrayerAPIV2PrayersApiFp(this.configuration).prayerControllerDelete(requestParameters.prayerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Do prayer
     * @param {PrayerAPIV2PrayersApiPrayerControllerDoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrayerAPIV2PrayersApi
     */
    public prayerControllerDo(requestParameters: PrayerAPIV2PrayersApiPrayerControllerDoRequest, options?: AxiosRequestConfig) {
        return PrayerAPIV2PrayersApiFp(this.configuration).prayerControllerDo(requestParameters.prayerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get prayer by id
     * @param {PrayerAPIV2PrayersApiPrayerControllerFindByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrayerAPIV2PrayersApi
     */
    public prayerControllerFindById(requestParameters: PrayerAPIV2PrayersApiPrayerControllerFindByIdRequest, options?: AxiosRequestConfig) {
        return PrayerAPIV2PrayersApiFp(this.configuration).prayerControllerFindById(requestParameters.prayerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get subscribed prayers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrayerAPIV2PrayersApi
     */
    public prayerControllerFindSubscribed(options?: AxiosRequestConfig) {
        return PrayerAPIV2PrayersApiFp(this.configuration).prayerControllerFindSubscribed(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Subscribe to prayer
     * @param {PrayerAPIV2PrayersApiPrayerControllerSubscribeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrayerAPIV2PrayersApi
     */
    public prayerControllerSubscribe(requestParameters: PrayerAPIV2PrayersApiPrayerControllerSubscribeRequest, options?: AxiosRequestConfig) {
        return PrayerAPIV2PrayersApiFp(this.configuration).prayerControllerSubscribe(requestParameters.prayerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove mark prayer as complete
     * @param {PrayerAPIV2PrayersApiPrayerControllerUncompleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrayerAPIV2PrayersApi
     */
    public prayerControllerUncomplete(requestParameters: PrayerAPIV2PrayersApiPrayerControllerUncompleteRequest, options?: AxiosRequestConfig) {
        return PrayerAPIV2PrayersApiFp(this.configuration).prayerControllerUncomplete(requestParameters.prayerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Unsubscribe from prayer
     * @param {PrayerAPIV2PrayersApiPrayerControllerUnsubscribeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrayerAPIV2PrayersApi
     */
    public prayerControllerUnsubscribe(requestParameters: PrayerAPIV2PrayersApiPrayerControllerUnsubscribeRequest, options?: AxiosRequestConfig) {
        return PrayerAPIV2PrayersApiFp(this.configuration).prayerControllerUnsubscribe(requestParameters.prayerId, options).then((request) => request(this.axios, this.basePath));
    }
}

