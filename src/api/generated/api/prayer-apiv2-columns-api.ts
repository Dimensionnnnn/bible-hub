/* tslint:disable */
/* eslint-disable */
/**
 * SocialMedia
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { Columns } from '../models';
// @ts-ignore
import { ColumnsDto } from '../models';
// @ts-ignore
import { PrayersDto } from '../models';
/**
 * PrayerAPIV2ColumnsApi - axios parameter creator
 * @export
 */
export const PrayerAPIV2ColumnsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new column
         * @param {ColumnsDto} columnsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        columnsControllerCreate: async (columnsDto: ColumnsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'columnsDto' is not null or undefined
            assertParamExists('columnsControllerCreate', 'columnsDto', columnsDto)
            const localVarPath = `/columns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(columnsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create prayer for specified column
         * @param {number} columnId Set column Id
         * @param {PrayersDto} prayersDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        columnsControllerCreatePrayer: async (columnId: number, prayersDto: PrayersDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'columnId' is not null or undefined
            assertParamExists('columnsControllerCreatePrayer', 'columnId', columnId)
            // verify required parameter 'prayersDto' is not null or undefined
            assertParamExists('columnsControllerCreatePrayer', 'prayersDto', prayersDto)
            const localVarPath = `/columns/{columnId}/prayers`
                .replace(`{${"columnId"}}`, encodeURIComponent(String(columnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(prayersDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete column by id
         * @param {number} columnId Set column Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        columnsControllerDelete: async (columnId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'columnId' is not null or undefined
            assertParamExists('columnsControllerDelete', 'columnId', columnId)
            const localVarPath = `/columns/{columnId}`
                .replace(`{${"columnId"}}`, encodeURIComponent(String(columnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get column by id
         * @param {number} columnId Set column Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        columnsControllerFindById: async (columnId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'columnId' is not null or undefined
            assertParamExists('columnsControllerFindById', 'columnId', columnId)
            const localVarPath = `/columns/{columnId}`
                .replace(`{${"columnId"}}`, encodeURIComponent(String(columnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get prayers by column id
         * @param {number} columnId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        columnsControllerFindPrayersByColumnId: async (columnId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'columnId' is not null or undefined
            assertParamExists('columnsControllerFindPrayersByColumnId', 'columnId', columnId)
            const localVarPath = `/columns/{columnId}/prayers`
                .replace(`{${"columnId"}}`, encodeURIComponent(String(columnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PrayerAPIV2ColumnsApi - functional programming interface
 * @export
 */
export const PrayerAPIV2ColumnsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PrayerAPIV2ColumnsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create new column
         * @param {ColumnsDto} columnsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async columnsControllerCreate(columnsDto: ColumnsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Columns>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.columnsControllerCreate(columnsDto, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PrayerAPIV2ColumnsApi.columnsControllerCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Create prayer for specified column
         * @param {number} columnId Set column Id
         * @param {PrayersDto} prayersDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async columnsControllerCreatePrayer(columnId: number, prayersDto: PrayersDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Columns>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.columnsControllerCreatePrayer(columnId, prayersDto, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PrayerAPIV2ColumnsApi.columnsControllerCreatePrayer']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete column by id
         * @param {number} columnId Set column Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async columnsControllerDelete(columnId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.columnsControllerDelete(columnId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PrayerAPIV2ColumnsApi.columnsControllerDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get column by id
         * @param {number} columnId Set column Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async columnsControllerFindById(columnId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Columns>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.columnsControllerFindById(columnId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PrayerAPIV2ColumnsApi.columnsControllerFindById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get prayers by column id
         * @param {number} columnId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async columnsControllerFindPrayersByColumnId(columnId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.columnsControllerFindPrayersByColumnId(columnId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PrayerAPIV2ColumnsApi.columnsControllerFindPrayersByColumnId']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * PrayerAPIV2ColumnsApi - factory interface
 * @export
 */
export const PrayerAPIV2ColumnsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PrayerAPIV2ColumnsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create new column
         * @param {PrayerAPIV2ColumnsApiColumnsControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        columnsControllerCreate(requestParameters: PrayerAPIV2ColumnsApiColumnsControllerCreateRequest, options?: AxiosRequestConfig): AxiosPromise<Columns> {
            return localVarFp.columnsControllerCreate(requestParameters.columnsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create prayer for specified column
         * @param {PrayerAPIV2ColumnsApiColumnsControllerCreatePrayerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        columnsControllerCreatePrayer(requestParameters: PrayerAPIV2ColumnsApiColumnsControllerCreatePrayerRequest, options?: AxiosRequestConfig): AxiosPromise<Columns> {
            return localVarFp.columnsControllerCreatePrayer(requestParameters.columnId, requestParameters.prayersDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete column by id
         * @param {PrayerAPIV2ColumnsApiColumnsControllerDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        columnsControllerDelete(requestParameters: PrayerAPIV2ColumnsApiColumnsControllerDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.columnsControllerDelete(requestParameters.columnId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get column by id
         * @param {PrayerAPIV2ColumnsApiColumnsControllerFindByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        columnsControllerFindById(requestParameters: PrayerAPIV2ColumnsApiColumnsControllerFindByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Columns> {
            return localVarFp.columnsControllerFindById(requestParameters.columnId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get prayers by column id
         * @param {PrayerAPIV2ColumnsApiColumnsControllerFindPrayersByColumnIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        columnsControllerFindPrayersByColumnId(requestParameters: PrayerAPIV2ColumnsApiColumnsControllerFindPrayersByColumnIdRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.columnsControllerFindPrayersByColumnId(requestParameters.columnId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for columnsControllerCreate operation in PrayerAPIV2ColumnsApi.
 * @export
 * @interface PrayerAPIV2ColumnsApiColumnsControllerCreateRequest
 */
export interface PrayerAPIV2ColumnsApiColumnsControllerCreateRequest {
    /**
     * 
     * @type {ColumnsDto}
     * @memberof PrayerAPIV2ColumnsApiColumnsControllerCreate
     */
    readonly columnsDto: ColumnsDto
}

/**
 * Request parameters for columnsControllerCreatePrayer operation in PrayerAPIV2ColumnsApi.
 * @export
 * @interface PrayerAPIV2ColumnsApiColumnsControllerCreatePrayerRequest
 */
export interface PrayerAPIV2ColumnsApiColumnsControllerCreatePrayerRequest {
    /**
     * Set column Id
     * @type {number}
     * @memberof PrayerAPIV2ColumnsApiColumnsControllerCreatePrayer
     */
    readonly columnId: number

    /**
     * 
     * @type {PrayersDto}
     * @memberof PrayerAPIV2ColumnsApiColumnsControllerCreatePrayer
     */
    readonly prayersDto: PrayersDto
}

/**
 * Request parameters for columnsControllerDelete operation in PrayerAPIV2ColumnsApi.
 * @export
 * @interface PrayerAPIV2ColumnsApiColumnsControllerDeleteRequest
 */
export interface PrayerAPIV2ColumnsApiColumnsControllerDeleteRequest {
    /**
     * Set column Id
     * @type {number}
     * @memberof PrayerAPIV2ColumnsApiColumnsControllerDelete
     */
    readonly columnId: number
}

/**
 * Request parameters for columnsControllerFindById operation in PrayerAPIV2ColumnsApi.
 * @export
 * @interface PrayerAPIV2ColumnsApiColumnsControllerFindByIdRequest
 */
export interface PrayerAPIV2ColumnsApiColumnsControllerFindByIdRequest {
    /**
     * Set column Id
     * @type {number}
     * @memberof PrayerAPIV2ColumnsApiColumnsControllerFindById
     */
    readonly columnId: number
}

/**
 * Request parameters for columnsControllerFindPrayersByColumnId operation in PrayerAPIV2ColumnsApi.
 * @export
 * @interface PrayerAPIV2ColumnsApiColumnsControllerFindPrayersByColumnIdRequest
 */
export interface PrayerAPIV2ColumnsApiColumnsControllerFindPrayersByColumnIdRequest {
    /**
     * 
     * @type {number}
     * @memberof PrayerAPIV2ColumnsApiColumnsControllerFindPrayersByColumnId
     */
    readonly columnId: number
}

/**
 * PrayerAPIV2ColumnsApi - object-oriented interface
 * @export
 * @class PrayerAPIV2ColumnsApi
 * @extends {BaseAPI}
 */
export class PrayerAPIV2ColumnsApi extends BaseAPI {
    /**
     * 
     * @summary Create new column
     * @param {PrayerAPIV2ColumnsApiColumnsControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrayerAPIV2ColumnsApi
     */
    public columnsControllerCreate(requestParameters: PrayerAPIV2ColumnsApiColumnsControllerCreateRequest, options?: AxiosRequestConfig) {
        return PrayerAPIV2ColumnsApiFp(this.configuration).columnsControllerCreate(requestParameters.columnsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create prayer for specified column
     * @param {PrayerAPIV2ColumnsApiColumnsControllerCreatePrayerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrayerAPIV2ColumnsApi
     */
    public columnsControllerCreatePrayer(requestParameters: PrayerAPIV2ColumnsApiColumnsControllerCreatePrayerRequest, options?: AxiosRequestConfig) {
        return PrayerAPIV2ColumnsApiFp(this.configuration).columnsControllerCreatePrayer(requestParameters.columnId, requestParameters.prayersDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete column by id
     * @param {PrayerAPIV2ColumnsApiColumnsControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrayerAPIV2ColumnsApi
     */
    public columnsControllerDelete(requestParameters: PrayerAPIV2ColumnsApiColumnsControllerDeleteRequest, options?: AxiosRequestConfig) {
        return PrayerAPIV2ColumnsApiFp(this.configuration).columnsControllerDelete(requestParameters.columnId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get column by id
     * @param {PrayerAPIV2ColumnsApiColumnsControllerFindByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrayerAPIV2ColumnsApi
     */
    public columnsControllerFindById(requestParameters: PrayerAPIV2ColumnsApiColumnsControllerFindByIdRequest, options?: AxiosRequestConfig) {
        return PrayerAPIV2ColumnsApiFp(this.configuration).columnsControllerFindById(requestParameters.columnId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get prayers by column id
     * @param {PrayerAPIV2ColumnsApiColumnsControllerFindPrayersByColumnIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrayerAPIV2ColumnsApi
     */
    public columnsControllerFindPrayersByColumnId(requestParameters: PrayerAPIV2ColumnsApiColumnsControllerFindPrayersByColumnIdRequest, options?: AxiosRequestConfig) {
        return PrayerAPIV2ColumnsApiFp(this.configuration).columnsControllerFindPrayersByColumnId(requestParameters.columnId, options).then((request) => request(this.axios, this.basePath));
    }
}

