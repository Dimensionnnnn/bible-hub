/* tslint:disable */
/* eslint-disable */
/**
 * SocialMedia
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { Comments } from '../models';
// @ts-ignore
import { CommentsDto } from '../models';
// @ts-ignore
import { FindCommentsResponseDto } from '../models';
/**
 * PrayerAPIV2CommentsApi - axios parameter creator
 * @export
 */
export const PrayerAPIV2CommentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create comment for specified prayer
         * @param {number} prayerId Set prayer Id
         * @param {CommentsDto} commentsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsControllerAddCommentToPrayer: async (prayerId: number, commentsDto: CommentsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prayerId' is not null or undefined
            assertParamExists('commentsControllerAddCommentToPrayer', 'prayerId', prayerId)
            // verify required parameter 'commentsDto' is not null or undefined
            assertParamExists('commentsControllerAddCommentToPrayer', 'commentsDto', commentsDto)
            const localVarPath = `/prayers/{prayerId}/comments`
                .replace(`{${"prayerId"}}`, encodeURIComponent(String(prayerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commentsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get comments for specified prayer
         * @param {number} prayerId Set prayer Id
         * @param {number} limit 
         * @param {string} [afterCursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsControllerGetComments: async (prayerId: number, limit: number, afterCursor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prayerId' is not null or undefined
            assertParamExists('commentsControllerGetComments', 'prayerId', prayerId)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('commentsControllerGetComments', 'limit', limit)
            const localVarPath = `/prayers/{prayerId}/comments`
                .replace(`{${"prayerId"}}`, encodeURIComponent(String(prayerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (afterCursor !== undefined) {
                localVarQueryParameter['afterCursor'] = afterCursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PrayerAPIV2CommentsApi - functional programming interface
 * @export
 */
export const PrayerAPIV2CommentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PrayerAPIV2CommentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create comment for specified prayer
         * @param {number} prayerId Set prayer Id
         * @param {CommentsDto} commentsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsControllerAddCommentToPrayer(prayerId: number, commentsDto: CommentsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsControllerAddCommentToPrayer(prayerId, commentsDto, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PrayerAPIV2CommentsApi.commentsControllerAddCommentToPrayer']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get comments for specified prayer
         * @param {number} prayerId Set prayer Id
         * @param {number} limit 
         * @param {string} [afterCursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsControllerGetComments(prayerId: number, limit: number, afterCursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindCommentsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsControllerGetComments(prayerId, limit, afterCursor, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PrayerAPIV2CommentsApi.commentsControllerGetComments']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * PrayerAPIV2CommentsApi - factory interface
 * @export
 */
export const PrayerAPIV2CommentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PrayerAPIV2CommentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create comment for specified prayer
         * @param {PrayerAPIV2CommentsApiCommentsControllerAddCommentToPrayerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsControllerAddCommentToPrayer(requestParameters: PrayerAPIV2CommentsApiCommentsControllerAddCommentToPrayerRequest, options?: AxiosRequestConfig): AxiosPromise<Comments> {
            return localVarFp.commentsControllerAddCommentToPrayer(requestParameters.prayerId, requestParameters.commentsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get comments for specified prayer
         * @param {PrayerAPIV2CommentsApiCommentsControllerGetCommentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsControllerGetComments(requestParameters: PrayerAPIV2CommentsApiCommentsControllerGetCommentsRequest, options?: AxiosRequestConfig): AxiosPromise<FindCommentsResponseDto> {
            return localVarFp.commentsControllerGetComments(requestParameters.prayerId, requestParameters.limit, requestParameters.afterCursor, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for commentsControllerAddCommentToPrayer operation in PrayerAPIV2CommentsApi.
 * @export
 * @interface PrayerAPIV2CommentsApiCommentsControllerAddCommentToPrayerRequest
 */
export interface PrayerAPIV2CommentsApiCommentsControllerAddCommentToPrayerRequest {
    /**
     * Set prayer Id
     * @type {number}
     * @memberof PrayerAPIV2CommentsApiCommentsControllerAddCommentToPrayer
     */
    readonly prayerId: number

    /**
     * 
     * @type {CommentsDto}
     * @memberof PrayerAPIV2CommentsApiCommentsControllerAddCommentToPrayer
     */
    readonly commentsDto: CommentsDto
}

/**
 * Request parameters for commentsControllerGetComments operation in PrayerAPIV2CommentsApi.
 * @export
 * @interface PrayerAPIV2CommentsApiCommentsControllerGetCommentsRequest
 */
export interface PrayerAPIV2CommentsApiCommentsControllerGetCommentsRequest {
    /**
     * Set prayer Id
     * @type {number}
     * @memberof PrayerAPIV2CommentsApiCommentsControllerGetComments
     */
    readonly prayerId: number

    /**
     * 
     * @type {number}
     * @memberof PrayerAPIV2CommentsApiCommentsControllerGetComments
     */
    readonly limit: number

    /**
     * 
     * @type {string}
     * @memberof PrayerAPIV2CommentsApiCommentsControllerGetComments
     */
    readonly afterCursor?: string
}

/**
 * PrayerAPIV2CommentsApi - object-oriented interface
 * @export
 * @class PrayerAPIV2CommentsApi
 * @extends {BaseAPI}
 */
export class PrayerAPIV2CommentsApi extends BaseAPI {
    /**
     * 
     * @summary Create comment for specified prayer
     * @param {PrayerAPIV2CommentsApiCommentsControllerAddCommentToPrayerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrayerAPIV2CommentsApi
     */
    public commentsControllerAddCommentToPrayer(requestParameters: PrayerAPIV2CommentsApiCommentsControllerAddCommentToPrayerRequest, options?: AxiosRequestConfig) {
        return PrayerAPIV2CommentsApiFp(this.configuration).commentsControllerAddCommentToPrayer(requestParameters.prayerId, requestParameters.commentsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get comments for specified prayer
     * @param {PrayerAPIV2CommentsApiCommentsControllerGetCommentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrayerAPIV2CommentsApi
     */
    public commentsControllerGetComments(requestParameters: PrayerAPIV2CommentsApiCommentsControllerGetCommentsRequest, options?: AxiosRequestConfig) {
        return PrayerAPIV2CommentsApiFp(this.configuration).commentsControllerGetComments(requestParameters.prayerId, requestParameters.limit, requestParameters.afterCursor, options).then((request) => request(this.axios, this.basePath));
    }
}

